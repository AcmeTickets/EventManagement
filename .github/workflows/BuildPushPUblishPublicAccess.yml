name: Deploy to Azure Container App with public package
 
permissions:
  contents: read
  packages: write


on:
  workflow_dispatch:


env:
  RESOURCE_GROUP: acmetickets_rg
  CONTAINERAPPS_ENVIRONMENT: acmeticketsacadev
  AZURE_LOCATION: eastus
  IMAGE_NAME: acmetickets-api
  REGISTRY: ghcr.io
  APP_NAME: acmetickets-api

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set IMAGE_TAG variable
      run: |
        IMAGE_TAG=$(echo "ghcr.io/${{ github.repository }}/api:${{ github.sha }}" | tr '[:upper:]' '[:lower:]')
        echo $IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build -t $IMAGE_TAG -f src/Message/Dockerfile .

    - name: Build and push Docker image to GHCR
      run: |
        docker push $IMAGE_TAG

    - name: Check if Azure Container App exists
      id: check_aca
      run: |
        if az containerapp show --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" > /dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Container App (if not exists)
      if: steps.check_aca.outputs.exists == 'false'
      run: |
        az containerapp create \
          --name "$APP_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --environment "$CONTAINERAPPS_ENVIRONMENT" \
          --image "$IMAGE_TAG" \
          --ingress external \
          --target-port 5271 \
          --env-vars ASPNETCORE_ENVIRONMENT=Development ConnectionStrings__AzureServiceBus=${{ secrets.AZURE_SERVICEBUS_CONNECTION_STRING }}

    - name: Update Container App with new image
      if: steps.check_aca.outputs.exists == 'true'
      run: |
        az containerapp update \
          --name "$APP_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --image "$IMAGE_TAG" \
          --set-env-vars ASPNETCORE_ENVIRONMENT=Development ConnectionStrings__AzureServiceBus=${{ secrets.AZURE_SERVICEBUS_CONNECTION_STRING }}
